<?php
/**
 * DocumentsCreateDocumentResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lacuna\Signer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dropsigner (HML)
 *
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentCanceled</strong></td>     <td>Triggered when the document is canceled.</td>     <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>
 *
 * OpenAPI spec version: 1.35.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lacuna\Scenarios\DocumentGeneration;

use \ArrayAccess;
use \Lacuna\Signer\ObjectSerializer;
use \Lacuna\Signer\Model\ModelInterface;

/**
 * DocumentsCreateDocumentResult Class Doc Comment
 *
 * @category Class
 * @package  Lacuna\Signer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GenerationDocumentResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Documents.CreateDocumentResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'folderId' => 'string',
'subscriptionId' => 'string',
'id' => 'string',
'type' => 'string',
'agentId' => 'string',
'totalDocumentsCount' => 'int',
'initializedCount' => 'int',
'completedCount' => 'int',
'status' => 'string'
];


    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'folderId' => null,
'subscriptionId' => null,
'id' => null,
'type' => null,
'agentId' => null,
'totalDocumentsCount' => null,
'initializedCount' => null,
'completedCount' => null,
'status' => null
];
        
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'folderId' => 'folderId',
'subscriptionId' => 'subscriptionId',
'id' => 'id',
'type' => 'type',
'agentId' => 'agentId',
'totalDocumentsCount' => 'totalDocumentsCount',
'initializedCount' => 'initializedCount',
'completedCount' => 'completedCount',
'status' => 'status'    
];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'folderId' => 'setFolderId',
'subscriptionId' => 'setSubscriptionId',
'id' => 'setId',
'type' => 'setType',
'agentId' => 'setAgentId',
'totalDocumentsCount' => 'setTotalDocumentsCount',
'initializedCount' => 'setInitializedCount',
'completedCount' => 'setCompletedCount',
'status' => 'setStatus'   
];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'folderId' => 'getFolderId',
'subscriptionId' => 'getSubscriptionId',
'id' => 'getId',
'type' => 'getType',
'agentId' => 'getAgentId',
'totalDocumentsCount' => 'getTotalDocumentsCount',
'initializedCount' => 'getInitializedCount',
'completedCount' => 'getCompletedCount',
'status' => 'getStatus'    
 ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['folderId'] = isset($data['folderId']) ? $data['folderId'] : null;
        $this->container['subscriptionId'] = isset($data['subscriptionId']) ? $data['subscriptionId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['agentId'] = isset($data['agentId']) ? $data['agentId'] : null;
        $this->container['totalDocumentsCount'] = isset($data['totalDocumentsCount']) ? $data['totalDocumentsCount'] : null;
        $this->container['initializedCount'] = isset($data['initializedCount']) ? $data['initializedCount'] : null;
        $this->container['completedCount'] = isset($data['completedCount']) ? $data['completedCount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uploadId
     *
     * @return string
     */
    public function getFolderId()
    {
        return $this->container['folderId'];
    }

    /**
     * Sets uploadId
     *
     * @param string $uploadId The Id of the uploaded file, from the request Lacuna.Signer.Api.UploadModel.Id.
     *
     * @return $this
     */
    public function setFolderId($folderId)
    {
        $this->container['folderId'] = $folderId;

        return $this;
    }

    /**
     * Gets documentId
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscriptionId'];
    }

    /**
     * Sets documentId
     *
     * @param string $documentId The Id of the newly created document.
     *
     * @return $this
     */
    public function setSubscriptionId($subscriptionId)
    {
        $this->container['subscriptionId'] = $subscriptionId;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

/**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    
/**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getAgentId()
    {
        return $this->container['agentId'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setAgentId($agentId)
    {
        $this->container['agentId'] = $agentId;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getTotalDocumentsCount()
    {
        return $this->container['totalDocumentsCount'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setTotalDocumentsCount($totalDocumentsCount)
    {
        $this->container['totalDocumentsCount'] = $totalDocumentsCount;

        return $this;
    }

    
    /**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getInitializedCount()
    {
        return $this->container['initializedCount'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setInitializedCount($initializedCount)
    {
        $this->container['initializedCount'] = $initializedCount;

        return $this;
    }

    
    /**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getCompletedCount()
    {
        return $this->container['completedCount'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setCompletedCount($completedCount)
    {
        $this->container['completedCount'] = $completedCount;

        return $this;
    }

    
    /**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsCreateAttachmentResult[] $attachments Result of creating attachments
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
